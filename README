## CS4760 Project 5: Resource Management

**OSS (operating system simulator)** is a program that simulates an operating system.

OSS manages resources, and user processes request resources.
OSS will then check if resources are available.
If a resource is available, then OSS will run the Banker's Algorithm to check if there is a safe sequence after the resource is granted.
If there is a safe sequence, then OSS will grant the resource.
If there is *no* safe sequence, then OSS will put the requesting process in a blocked queue.
OSS will check the blocked queue every time a resource is released to see if any blocked processes can be unblocked.

### Safe Sequences
A *safe sequence* is an ordering of processes.
For example, <P2, P4, P0, P1, P3> could be a safe sequence, and that would mean that P2 could finish executing and then release its resources.
Then, P4 would finish executing and release its resources, and so on until all the processes have finished executing and all the resources have been released.
Thus, a safe sequence guarantees that there cannot be a deadlock.

### OSS and User Process Communication
User processes communicate to OSS that they request or release a resource by sending it a message through a *message queue*.
After sending a message to request/release a resource, the user process will use a blocking receive to receive a response message from OSS.
Thus, the user process will not continue executing until a response is received.

### Program Hanging
The program has a very low probability of stalling for a reason that I have not been able to figure out.
If that happens, then press Ctrl+C to exit the program and try rerunning it.

The program will generate a log file called `oss.log`. Use the -v (verbose) flag to have more information printed to the console and log file.

To build this program:
```
make
```

To run this program:
```
./oss
```

To run this program in verbose mode:
```
./oss -v
```

To cleanup:
```
make clean
```

#### Changelog

